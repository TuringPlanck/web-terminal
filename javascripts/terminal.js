// Generated by CoffeeScript 1.9.3
/**
 *
 * @license GNU General Public License v2.0, https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html
 * @version 0.1.0
 * @author  Logan Martel, https://github.com/martelogan
 * @updated 2018-06-28
 * @link    https://github.com/martelogan/web-terminal
 *
 *
 */
(function() {
  var Terminal;

  Terminal = (function() {
    var command_line;

    function Terminal(target, PS1, welcome, guide, commands) {
      var instance;
      this.target = target != null ? target : ".shell .text";
      this.PS1 = PS1 != null ? PS1 : "$ ";
      this.welcome = welcome != null ? welcome : "./hello_friend";
      this.guide = guide != null ? guide : "Run 'help' for basic commands";
      this.commands = commands != null ? commands : ["no commands available"];
      instance = this;
      $(document.body).on('keyup', 'input#command', function(e) {
        var command;
        if (e.keyCode === 13) {
          $(this).blur();
          $(this).prop('readonly', true);
          command = $(this).val();
          instance.print("<br>");
          try {
            return instance["" + command]();
          } catch (_error) {
            e = _error;
            return instance.print("command unavailable");
          } finally {
            instance.newline();
          }
        }
      });
    }

    command_line = '<input type="text" id="command" value="">';

    Terminal.prototype.init = function() {
      return this.greet(this.welcome, 0, 100);
    };

    Terminal.prototype.print = function(element) {
      var $target;
      $target = $(this.target);
      return $target.append(element);
    };

    Terminal.prototype.newline = function() {
      this.print("<br> " + this.PS1);
      this.print(command_line);
      return $("input#command").last().focus();
    };

    Terminal.prototype.greet = function(message, index, interval) {
      if (index < message.length) {
        this.print(message[index++]);
        return setTimeout(((function(_this) {
          return function() {
            return _this.greet(message, index, interval);
          };
        })(this)), interval);
      } else {
        this.print("<br> " + this.guide);
        return this.newline();
      }
    };

    Terminal.prototype.help = function() {
      var command, i, len, ref, results;
      ref = this.commands;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        command = ref[i];
        results.push(this.print(command + "<br>"));
      }
      return results;
    };

    return Terminal;

  })();

}).call(this);
